#==============================================================================
# Copyright (C) 2017 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.rc ]; then
            source "${a}"/clusterware/config.rc
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_fetch_app_from_s3() {
    local bucket s3cfg
    bucket="$1"
    s3cfg="$(mktemp /tmp/cluster-customizer.s3cfg.XXXXXXXX)"
    cat <<EOF > "${s3cfg}"
[default]
access_key = "${cw_CLUSTER_CUSTOMIZER_access_key_id}"
secret_key = "${cw_CLUSTER_CUSTOMIZER_secret_access_key}"
security_token = ""
use_https = True
check_ssl_certificate = True
EOF
    ${cw_ROOT}/opt/s3cmd/s3cmd -c ${s3cfg} get ${bucket}/apps/${_APP}/${_PACKAGE} ${_WORKDIR}/${_PACKAGE}
    ${cw_ROOT}/opt/s3cmd/s3cmd -c ${s3cfg} get ${bucket}/apps/${_APP}/${_LICENSE} ${_WORKDIR}/${_LICENSE}
    rm -f ${s3cfg}
}

_install_prereqs() {
    yum install -y -e0 java-1.8.0-openjdk-headless
}

_setup_users() {
    local password signal_data
    useradd -r efnobody
    useradd efadmin
    if ! type -f apg &>/dev/null; then
        if distro_enable_repository epel; then
            yum install -y -e0 apg
        fi
    fi
    if type -f apg &>/dev/null; then
        password=$(echo $(apg -M l -m5 -x5 -n3 -a0) | tr ' ' '-')
    else
        password="$(dd if=/dev/urandom bs=24 count=2 2>/dev/null | base64 | cut -c1-16)"
    fi

    echo "efadmin:${password}" | chpasswd
    cat <<EOF > "${cw_ROOT}"/etc/config/cluster/enginframe-auth.rc
cw_ENGINFRAME_admin_password="${password}"
EOF
    chmod 0600 "${cw_ROOT}"/etc/config/cluster/enginframe-auth.rc
    # Add user/password details to meta file
    cat <<'EOF' > "${cw_ROOT}"/etc/meta.d/enginframe.rc
: '
: SYNOPSIS: EnginFrame access details
: HELP: Display EnginFrame administrator username and password.
: '
################################################################################
##
## Alces Clusterware - Metadata file
## Copyright (c) 2017 Alces Software Ltd
##
################################################################################
cw_META_enginframe_adminuser_desc="EnginFrame admin username"
cw_META_enginframe_adminuser="efadmin"
if [ -r "${cw_ROOT}"/etc/config/cluster/enginframe-auth.rc ]; then
  files_load_config enginframe-auth config/cluster
  cw_META_enginframe_password_desc="EnginFrame admin password"
  cw_META_enginframe_password="${cw_ENGINFRAME_admin_password}"
fi
EOF
    # Add password to signal.rc
    signal_data="EnginFrame Admin Password=${password}"
    ruby_run <<RUBY
  content = if File.exists?('${cw_ROOT}/etc/signal.rc')
    File.read('${cw_ROOT}/etc/signal.rc').gsub!(%(cw_SIGNAL_data="),%(cw_SIGNAL_data="${signal_data};))
  else
    %(cw_SIGNAL_data="${signal_data}")
  end
  File.write('${cw_ROOT}/etc/signal.rc', content, perm: 0600)
RUBY
}

_show_help() {
          cat <<EOF
******************************************************************************

  Please download the ${_APP_NAME} installation file(s) from the
  download link provided by ${_VENDOR}.

  If you do not have a download link, please contact ${_VENDOR} support at
  ${_VENDOR_EMAIL}.

  Copy the installation archive and license file to ${_WORKDIR} on
  this machine:

    ${_WORKDIR}/${_PACKAGE}
    ${_WORKDIR}/${_LICENSE}

  For repeatable installation, upload to your Alces Flight S3
  customization bucket:

    ${bucket}/apps/${_APP}/${_PACKAGE}
    ${bucket}/apps/${_APP}/${_LICENSE}

  Once you have placed the files in one of these locations, run the
  following command:

    alces customize trigger configure feature-${_APP}

  Installation will then continue.

******************************************************************************
EOF
}

_show_completed_message() {
    files_load_config --optional access
    cat <<EOF
EnginFrame installation completed.

Note: if you are triggering the installation manually, you'll also
need to perform a couple of additional steps to start the service:

  systemctl start enginframe
  systemctl restart clusterware-alces-flight-www

EOF
    if [ "${cw_ACCESS_fqdn}" ]; then
        cat <<EOF
Once the services have started, you can access the EnginFrame UI at:

  https://${cw_ACCESS_fqdn}/enginframe

EOF
    fi
}

_execute_installer() {
    java -jar ${_WORKDIR}/${_PACKAGE} --batch -f ${_RESOURCES_DIR}/efinstall.config
}

_setup_flight_www() {
    if serviceware_is_installed alces-flight-www; then
        cp -R ${_RESOURCES_DIR}/alces-flight-www/etc/* "${cw_ROOT}/etc/alces-flight-www"
        "${cw_ROOT}"/libexec/share/www-add-resource ${_RESOURCES_DIR}/alces-flight-www/resource/enginframe
    fi
}

_install_app() {
    local bucket fetched_from_s3
    if [ ! -f ${_WORKDIR}/${_PACKAGE} -a ! -f ${_WORKDIR}/${_LICENSE} ]; then
        files_load_config cluster-customizer
        if [ "${cw_CLUSTER_CUSTOMIZER_bucket}" ]; then
            bucket="${cw_CLUSTER_CUSTOMIZER_bucket}"
        elif network_is_ec2; then
            bucket="s3://alces-flight-$(network_ec2_hashed_account)"
        else
            echo "Unable to determine bucket name for application download."
            return 0
        fi
        _fetch_app_from_s3 "${bucket}"
        fetched_from_s3=true
    fi
    if [ -f ${_WORKDIR}/${_PACKAGE} -a -f ${_WORKDIR}/${_LICENSE} ]; then
        _install_prereqs
        _setup_users
        if _execute_installer; then
            _setup_flight_www
            if [ "${fetched_from_s3}" ]; then
                rm -f ${_WORKDIR}/${_PACKAGE} ${_WORKDIR}/${_LICENSE}
            fi
            _show_completed_message
        else
            echo "WARNING: EnginFrame failed to install."
        fi
    else
        _show_help
    fi
}

main() {
    local role
    role="$2"
    if [ "$role" == "master" ]; then
        _install_app
    fi
}

setup
require files
require network
require handler
require ruby
require distro
require serviceware

_VENDOR=NICE
_APP_NAME=EnginFrame
_VENDOR_EMAIL=helpdesk@nice-software.com
_APP=enginframe
_PACKAGE=enginframe-2017.0-r41570.jar
_LICENSE=enginframe.lic
_WORKDIR=/tmp
_RESOURCES_DIR="$(handler_dir)/../resources"

main "$@"
