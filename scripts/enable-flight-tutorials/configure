#!/bin/bash
#==============================================================================
# Copyright (C) 2017 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.rc ]; then
            source "${a}"/clusterware/config.rc
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

enable_flight_tutorials() {
    "${cw_ROOT}"/bin/alces service install alces-flight-tutorials
    "${cw_ROOT}"/bin/alces service enable alces-flight-tutorials
}

create_metadata_file() {
    cat <<EOF > "${cw_ROOT}"/etc/meta.d/flight-tutorials.rc
: '
: SYNOPSIS: Flight Tutorials access details
: HELP: Display information about the Flight Tutorials service configuration for this cluster.
: '
################################################################################
##
## Alces Clusterware - Metadata file
## Copyright (c) 2016 Alces Software Ltd
##
################################################################################
EOF
    # XXX We should check that HTTPS access is enabled.  We don't run the
    # tutorials over HTTP, so if it isn't enabled we should bail here and
    # above too.
    echo "cw_META_flight_tutorials_https_desc=\"HTTPS access point\"" >> "${cw_ROOT}"/etc/meta.d/flight-tutorials.rc
    echo "cw_META_flight_tutorials_https=\"$(tutorials_url)\"" >> "${cw_ROOT}"/etc/meta.d/flight-tutorials.rc
}

add_signal_data() {
    # Add tutorial access URL to signal.rc
    signal_data="Flight Tutorials URL=$(tutorials_url)"
    ruby_run <<RUBY
content = if File.exists?('${cw_ROOT}/etc/signal.rc')
  File.read('${cw_ROOT}/etc/signal.rc').gsub!(%(cw_SIGNAL_data="),%(cw_SIGNAL_data="${signal_data};))
else
  %(cw_SIGNAL_data="${signal_data}")
end
File.write('${cw_ROOT}/etc/signal.rc', content, perm: 0600)
RUBY
}

tutorials_url() {
    host="${cw_ACCESS_fqdn:-$(network_get_public_hostname)}"
    # XXX Obtain https_port correctly. Don't rely on the default 443, to be correct.
    https_port=""
    tutorial_name_param="${cw_FLIGHT_TUTORIAL_name:-default}"
    if [ "${tutorial_name_param}" != "default" ] ; then
        tutorial_name_param="?tutorials=${tutorial_name_param}"
    else
        tutorial_name_param=""
    fi
    echo "https://${host}${https_port}/tutorials${tutorial_name_param}"
}

main() {
    enable_flight_tutorials
    add_signal_data
    create_metadata_file
}

setup
require files
require network
require ruby
files_load_config --optional access

main "$@"
